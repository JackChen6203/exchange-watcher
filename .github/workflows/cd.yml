name: 持續部署管道

on:
  push:
    branches: [ main ]  # 只監聽 main 分支，簡化邏輯
  release:
    types: [ published ]
  workflow_dispatch:

jobs:
  deploy-to-gcp:
    runs-on: ubuntu-latest
    needs: [test]
    if: github.ref == 'refs/heads/main'  # 只在 main 分支部署
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci --only=production
      
    - name: Create deployment package
      run: |
        echo "🚀 Creating deployment package..."
        mkdir -p deploy
        
        # 複製源代碼
        if [ -d "src" ]; then
          cp -r src deploy/
          echo "✅ Source code copied"
        else
          echo "❌ No src directory found"
          exit 1
        fi
        
        # 創建並複製 data 目錄
        mkdir -p data
        if [ ! -f "data/README.md" ]; then
          echo "# Data Directory" > data/README.md
          echo "This directory contains application data files." >> data/README.md
        fi
        cp -r data deploy/
        echo "✅ Data directory copied"
        
        # 複製 package 文件
        cp package*.json deploy/
        echo "✅ Package files copied"
        
        # 複製 node_modules
        cp -r node_modules deploy/
        echo "✅ Dependencies copied"
        
        # 創建 logs 目錄
        mkdir -p deploy/logs
        echo "✅ Logs directory created"
        
        # 複製配置文件（如果存在）
        [ -f .env.template ] && cp .env.template deploy/ && echo "✅ Env template copied"
        [ -f crypto-monitor.service ] && cp crypto-monitor.service deploy/ && echo "✅ Systemd service file copied"
        
        echo "📦 Deployment package ready!"
        
    - name: Setup SSH connection
      run: |
        echo "🔑 Setting up SSH connection..."
        
        # 檢查必要的 secrets
        if [ -z "${{ secrets.GCP_SSH_PRIVATE_KEY }}" ]; then
          echo "❌ GCP_SSH_PRIVATE_KEY secret not configured"
          exit 1
        fi
        
        # 創建 SSH 目錄和密鑰文件
        mkdir -p ~/.ssh
        chmod 700 ~/.ssh
        
        # 將私鑰寫入文件
        echo "${{ secrets.GCP_SSH_PRIVATE_KEY }}" > ~/.ssh/deploy_key
        chmod 600 ~/.ssh/deploy_key
        
        # 添加服務器到 known_hosts
        ssh-keyscan -H ${{ secrets.GCP_HOST || '35.212.185.14' }} >> ~/.ssh/known_hosts
        
        echo "✅ SSH setup completed"
        
    - name: Deploy to GCP
      run: |
        echo "🚀 Deploying to GCP..."
        
        GCP_HOST="${{ secrets.GCP_HOST || '35.212.185.14' }}"
        GCP_USER="${{ secrets.GCP_USER || 'JackChen6203' }}"
        
        # 測試 SSH 連接
        ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no ${GCP_USER}@${GCP_HOST} "echo 'SSH connection successful!'"
        
        # 準備部署目錄並停止現有服務
        ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no ${GCP_USER}@${GCP_HOST} "
          # 創建目錄
          mkdir -p /home/${GCP_USER}/crypto-exchange-monitor
          mkdir -p /home/${GCP_USER}/crypto-exchange-monitor/logs
          cd /home/${GCP_USER}/crypto-exchange-monitor
          
          # 停止現有服務
          echo '停止現有服務...'
          sudo systemctl stop crypto-monitor 2>/dev/null || echo 'No existing service to stop'
        "
        
        # 同步文件
        echo "📁 Syncing files..."
        rsync -avz --delete -e 'ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no' ./deploy/ ${GCP_USER}@${GCP_HOST}:/home/${GCP_USER}/crypto-exchange-monitor/
        
        # 安裝依賴並啟動服務
        echo "🔄 Starting service..."
        ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no ${GCP_USER}@${GCP_HOST} "
          cd /home/${GCP_USER}/crypto-exchange-monitor
          
          # 安裝依賴
          echo '安裝依賴...'
          npm install --only=production
          
          # 創建 .env 文件（如果不存在）
          if [ ! -f .env ]; then
            echo '創建 .env 文件...'
            cp .env.template .env 2>/dev/null || echo 'NODE_ENV=production' > .env
          fi
          
          # 設置 systemd 服務
          echo '設置 systemd 服務...'
          if [ -f crypto-monitor.service ]; then
            sudo cp crypto-monitor.service /etc/systemd/system/
            sudo systemctl daemon-reload
            sudo systemctl enable crypto-monitor
          fi
          
          # 啟動服務
          echo '啟動服務...'
          sudo systemctl start crypto-monitor
          
          # 等待服務啟動
          sleep 5
          
          # 檢查服務狀態
          echo '檢查服務狀態...'
          sudo systemctl status crypto-monitor --no-pager
          
          # 顯示最近的日誌
          echo '最近日誌:'
          sudo journalctl -u crypto-monitor --lines=10 --no-pager
        "
        
        echo "🎉 Deployment successful!"

  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run all tests
      run: npm run test:all
      env:
        NODE_ENV: test
