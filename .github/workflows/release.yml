name: Release

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  create-release:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run tests
      run: npm run test:all
      
    - name: Create changelog
      id: changelog
      run: |
        # ÁîüÊàêËÆäÊõ¥Êó•Ë™å
        echo "## üöÄ Release Notes" > CHANGELOG.md
        echo "" >> CHANGELOG.md
        
        # Áç≤Âèñ‰∏ä‰∏ÄÂÄãÊ®ôÁ±§
        PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        
        if [ -n "$PREV_TAG" ]; then
          echo "### üìù Changes since $PREV_TAG" >> CHANGELOG.md
          git log $PREV_TAG..HEAD --pretty=format:"- %s (%an)" >> CHANGELOG.md
        else
          echo "### üìù Changes in this release" >> CHANGELOG.md
          git log --pretty=format:"- %s (%an)" -10 >> CHANGELOG.md
        fi
        
        echo "" >> CHANGELOG.md
        echo "### üîß Technical Details" >> CHANGELOG.md
        echo "- Node.js version: $(node --version)" >> CHANGELOG.md
        echo "- Release date: $(date '+%Y-%m-%d %H:%M:%S UTC')" >> CHANGELOG.md
        
    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        body_path: CHANGELOG.md
        draft: false
        prerelease: false
        
  deploy-production:
    needs: create-release
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup SSH key
      uses: webfactory/ssh-agent@v0.7.0
      with:
        ssh-private-key: ${{ secrets.GCP_SSH_PRIVATE_KEY }}
        
    - name: Deploy to production
      run: |
        echo "üöÄ Deploying release ${{ github.ref }} to production..."
        
        ssh-keyscan -H ${{ secrets.GCP_HOST || '35.212.185.14' }} >> ~/.ssh/known_hosts
        
        # ÂâµÂª∫ÁôºÂ∏ÉÂÇô‰ªΩ
        ssh -o StrictHostKeyChecking=no ${{ secrets.GCP_USER || 'JackChen6203' }}@${{ secrets.GCP_HOST || '35.212.185.14' }} "
          mkdir -p /home/JackChen6203/backups
          if [ -d '/home/JackChen6203/crypto-exchange-monitor' ]; then
            BACKUP_NAME='crypto-monitor-release-backup-$(date +%Y%m%d-%H%M%S)'
            cp -r /home/JackChen6203/crypto-exchange-monitor /home/JackChen6203/backups/\$BACKUP_NAME
            echo 'üì¶ Backup created: /home/JackChen6203/backups/'\$BACKUP_NAME
          fi
        "
        
        # ÈÉ®ÁΩ≤Êñ∞ÁâàÊú¨
        rsync -avz --delete \
          --exclude 'node_modules' \
          --exclude '.git' \
          --exclude '.env' \
          --exclude 'data/monitor.db' \
          ./ ${{ secrets.GCP_USER || 'JackChen6203' }}@${{ secrets.GCP_HOST || '35.212.185.14' }}:/home/JackChen6203/crypto-exchange-monitor/
        
        ssh -o StrictHostKeyChecking=no ${{ secrets.GCP_USER || 'JackChen6203' }}@${{ secrets.GCP_HOST || '35.212.185.14' }} "
          cd /home/JackChen6203/crypto-exchange-monitor
          
          echo 'üì¶ Installing production dependencies...'
          npm install --only=production
          
          echo '‚èπÔ∏è Stopping service...'
          pm2 stop crypto-monitor || echo 'No existing process to stop'
          
          echo 'üöÄ Starting production service...'
          pm2 start src/index.js --name crypto-monitor --env production
          pm2 save
          
          echo '‚úÖ Production deployment completed!'
          echo 'Release: ${{ github.ref }}'
          echo 'Deployed at: $(date)'
          pm2 status crypto-monitor
        "
